2023-03-12 20:58:27.985 febs [main] INFO  cc.mrbird.febs.StoreApplication - Starting StoreApplication on WIN-KJDA35RA4FP with PID 3352 (started by Administrator in G:\Project\超市采购管理系统\store_purchase\backend)
2023-03-12 20:58:27.987 febs [main] INFO  cc.mrbird.febs.StoreApplication - No active profile set, falling back to default profiles: default
2023-03-12 20:58:28.636 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-03-12 20:58:28.637 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-03-12 20:58:28.686 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 29ms. Found 0 repository interfaces.
2023-03-12 20:58:28.928 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$320db23b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.026 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.091 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$c5cfddf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.097 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.100 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.107 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a2ce8d0e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.119 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$e4e8eb7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.353 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$713460b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.375 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.378 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.453 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.458 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$f455e91d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.461 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.465 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$e096f9a8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.470 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.472 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.474 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-03-12 20:58:29.478 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-03-12 20:58:29.615 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-03-12 20:58:29.615 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-03-12 20:58:29.615 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-03-12 20:58:29.615 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-03-12 20:58:29.615 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.625 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:29.631 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.070 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.075 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.077 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.078 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.093 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.094 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy110] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.098 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.099 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.100 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.127 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.141 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.158 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.159 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.160 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.175 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.176 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.192 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.193 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.196 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.211 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.227 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$fe620c9f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.230 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$b0aeceb8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.232 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$6bc5b4a7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.237 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.239 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.244 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$92912bd5] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.249 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.251 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$e06daa2e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.260 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.262 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.265 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.267 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.285 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.293 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.297 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.297 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.303 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.312 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 20:58:30.550 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-03-12 20:58:30.559 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-03-12 20:58:30.562 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-03-12 20:58:30.562 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-03-12 20:58:30.566 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_201\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\Bandizip\;F:\办公软件\Git\cmd;F:\nodejs\;F:\Yarn\bin\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Users\Administrator\AppData\Roaming\npm;C:\Users\Administrator\AppData\Local\Yarn\bin;.]
2023-03-12 20:58:30.657 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-03-12 20:58:30.657 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2641 ms
2023-03-12 20:58:31.098 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-03-12 20:58:31.099 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-03-12 20:58:31.099 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-03-12 20:58:31.099 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-03-12 20:58:31.099 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-03-12 20:58:31.099 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-03-12 20:58:31.099 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-03-12 20:58:31.099 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-03-12 20:58:31.513 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-03-12 20:58:31.521 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-03-12 20:58:31.521 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-03-12 20:58:31.524 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-03-12 20:58:31.525 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-03-12 20:58:31.526 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'WIN-KJDA35RA4FP1678625911513'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-03-12 20:58:31.526 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-03-12 20:58:31.526 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-03-12 20:58:31.527 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@470f0637
2023-03-12 20:58:31.562 febs [main] INFO  p6spy - 2023-03-12 20:58:31 | 耗时 1 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-03-12 20:58:31.912 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-03-12 20:58:32.875 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-03-12 20:58:32.924 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-03-12 20:58:32.995 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-03-12 20:58:33.003 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-03-12 20:58:33.003 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-03-12 20:58:33.013 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-03-12 20:58:33.015 febs [main] INFO  cc.mrbird.febs.StoreApplication - Started StoreApplication in 5.453 seconds (JVM running for 6.085)
2023-03-12 20:58:33.022 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-03-12 20:58:33.023 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-03-12 20:58:33.023 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-03-12 20:58:33.048 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 2 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-03-12 20:58:33.054 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 20:58:33.106 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-03-12 20:58:33.117 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-03-12 20:58:33.125 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-03-12 20:58:33.130 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 20:58:33.132 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-03-12 20:58:33.134 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-03-12 20:58:33.136 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-03-12 20:58:33.138 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 20:58:33.140 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-03-12 20:58:33.142 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-03-12 20:58:33.143 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-03-12 20:58:33.144 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'xiaoduan' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 20:58:33.148 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'xiaoduan';
2023-03-12 20:58:33.150 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'xiaoduan' and m.perms is not null and m.perms <> '';
2023-03-12 20:58:33.151 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-03-12 20:58:33.152 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 20:58:33.154 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test';
2023-03-12 20:58:33.156 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test' and m.perms is not null and m.perms <> '';
2023-03-12 20:58:33.157 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-03-12 20:58:33.158 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ddmtest14' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 20:58:33.160 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'ddmtest14';
2023-03-12 20:58:33.162 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'ddmtest14' and m.perms is not null and m.perms <> '';
2023-03-12 20:58:33.163 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='33' ;
2023-03-12 20:58:33.164 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test1' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 20:58:33.167 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test1';
2023-03-12 20:58:33.169 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test1' and m.perms is not null and m.perms <> '';
2023-03-12 20:58:33.169 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='34' ;
2023-03-12 20:58:33.171 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 20:58:33.173 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-03-12 20:58:33.175 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-03-12 20:58:33.180 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='35' ;
2023-03-12 20:58:33.186 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test33333' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 20:58:33.188 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test33333';
2023-03-12 20:58:33.190 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test33333' and m.perms is not null and m.perms <> '';
2023-03-12 20:58:33.191 febs [main] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='36' ;
2023-03-12 20:58:33.192 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-03-12 20:58:33.192 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-03-12 20:58:33.192 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-03-12 20:58:33.192 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-03-12 20:58:33.192 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - 启动完毕，时间：2023-03-12T20:58:33.192
2023-03-12 20:58:33.295 febs [RMI TCP Connection(1)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-03-12 20:58:33.295 febs [RMI TCP Connection(1)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-03-12 20:58:33.304 febs [RMI TCP Connection(1)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 9 ms
2023-03-12 20:58:33.306 febs [RMI TCP Connection(2)-192.168.1.3] INFO  p6spy - 2023-03-12 20:58:33 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-03-12 21:03:48.163 febs [Thread-15] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-03-12 21:03:48.170 febs [Thread-15] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-03-12 21:03:48.170 febs [Thread-15] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-03-12 21:03:48.170 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678625911513 shutting down.
2023-03-12 21:03:48.170 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678625911513 paused.
2023-03-12 21:03:48.170 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678625911513 shutdown complete.
2023-03-12 21:03:48.173 febs [Thread-15] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-03-12 21:03:48.174 febs [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-03-12 21:03:48.176 febs [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
2023-03-12 21:03:50.701 febs [main] INFO  cc.mrbird.febs.StoreApplication - Starting StoreApplication on WIN-KJDA35RA4FP with PID 8380 (started by Administrator in G:\Project\超市采购管理系统\store_purchase\backend)
2023-03-12 21:03:50.727 febs [main] INFO  cc.mrbird.febs.StoreApplication - No active profile set, falling back to default profiles: default
2023-03-12 21:03:51.394 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-03-12 21:03:51.396 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-03-12 21:03:51.444 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 30ms. Found 0 repository interfaces.
2023-03-12 21:03:51.672 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$64a6581a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:51.758 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:51.819 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$3ef5a3be] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:51.825 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:51.828 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:51.835 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$d56732ed] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:51.846 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$40e73496] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.059 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$39abebea] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.073 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.077 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.143 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.148 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$26ee8efc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.151 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.155 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$132f9f87] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.160 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.161 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.163 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-03-12 21:03:52.168 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-03-12 21:03:52.305 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-03-12 21:03:52.305 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-03-12 21:03:52.305 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-03-12 21:03:52.305 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-03-12 21:03:52.305 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.314 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.320 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.764 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.769 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.772 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.773 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.788 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.789 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy110] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.794 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.795 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.796 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.823 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.838 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.855 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.855 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.857 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.872 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.873 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.890 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.891 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.894 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.914 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.931 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$30fab27e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.934 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$e3477497] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.936 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$9e5e5a86] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.941 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.943 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.948 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$c529d1b4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.953 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.955 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$1306500d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.965 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.966 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.969 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.971 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.989 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:52.998 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:53.002 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:53.002 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:53.007 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:53.017 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:03:53.257 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-03-12 21:03:53.265 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-03-12 21:03:53.269 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-03-12 21:03:53.269 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-03-12 21:03:53.273 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_201\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\Bandizip\;F:\办公软件\Git\cmd;F:\nodejs\;F:\Yarn\bin\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Users\Administrator\AppData\Roaming\npm;C:\Users\Administrator\AppData\Local\Yarn\bin;.]
2023-03-12 21:03:53.361 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-03-12 21:03:53.361 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2605 ms
2023-03-12 21:03:53.796 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-03-12 21:03:53.796 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-03-12 21:03:53.796 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-03-12 21:03:53.796 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-03-12 21:03:53.796 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-03-12 21:03:53.796 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-03-12 21:03:53.796 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-03-12 21:03:53.796 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-03-12 21:03:54.207 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-03-12 21:03:54.216 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-03-12 21:03:54.216 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-03-12 21:03:54.219 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-03-12 21:03:54.220 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-03-12 21:03:54.220 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'WIN-KJDA35RA4FP1678626234208'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-03-12 21:03:54.220 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-03-12 21:03:54.220 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-03-12 21:03:54.221 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6b630d4b
2023-03-12 21:03:54.260 febs [main] INFO  p6spy - 2023-03-12 21:03:54 | 耗时 1 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-03-12 21:03:54.613 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-03-12 21:03:55.553 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-03-12 21:03:55.598 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-03-12 21:03:55.671 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-03-12 21:03:55.679 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-03-12 21:03:55.679 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-03-12 21:03:55.690 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-03-12 21:03:55.692 febs [main] INFO  cc.mrbird.febs.StoreApplication - Started StoreApplication in 5.356 seconds (JVM running for 5.968)
2023-03-12 21:03:55.698 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-03-12 21:03:55.699 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-03-12 21:03:55.699 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-03-12 21:03:55.722 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-03-12 21:03:55.726 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:03:55.777 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-03-12 21:03:55.788 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-03-12 21:03:55.796 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-03-12 21:03:55.800 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:03:55.803 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-03-12 21:03:55.805 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-03-12 21:03:55.807 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-03-12 21:03:55.809 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:03:55.811 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-03-12 21:03:55.813 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-03-12 21:03:55.815 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-03-12 21:03:55.817 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'xiaoduan' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:03:55.820 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'xiaoduan';
2023-03-12 21:03:55.822 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'xiaoduan' and m.perms is not null and m.perms <> '';
2023-03-12 21:03:55.823 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-03-12 21:03:55.824 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:03:55.826 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test';
2023-03-12 21:03:55.828 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test' and m.perms is not null and m.perms <> '';
2023-03-12 21:03:55.829 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-03-12 21:03:55.831 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ddmtest14' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:03:55.833 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'ddmtest14';
2023-03-12 21:03:55.834 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'ddmtest14' and m.perms is not null and m.perms <> '';
2023-03-12 21:03:55.836 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='33' ;
2023-03-12 21:03:55.837 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test1' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:03:55.840 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test1';
2023-03-12 21:03:55.842 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test1' and m.perms is not null and m.perms <> '';
2023-03-12 21:03:55.843 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='34' ;
2023-03-12 21:03:55.845 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:03:55.847 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-03-12 21:03:55.850 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-03-12 21:03:55.855 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='35' ;
2023-03-12 21:03:55.857 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test33333' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:03:55.859 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test33333';
2023-03-12 21:03:55.860 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test33333' and m.perms is not null and m.perms <> '';
2023-03-12 21:03:55.862 febs [main] INFO  p6spy - 2023-03-12 21:03:55 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='36' ;
2023-03-12 21:03:55.862 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-03-12 21:03:55.862 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-03-12 21:03:55.862 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-03-12 21:03:55.862 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-03-12 21:03:55.863 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - 启动完毕，时间：2023-03-12T21:03:55.863
2023-03-12 21:03:55.984 febs [RMI TCP Connection(1)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-03-12 21:03:55.984 febs [RMI TCP Connection(1)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-03-12 21:03:55.995 febs [RMI TCP Connection(1)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 11 ms
2023-03-12 21:03:56.061 febs [RMI TCP Connection(3)-192.168.1.3] INFO  p6spy - 2023-03-12 21:03:56 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-03-12 21:07:09.932 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:07:09.996 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:07:09 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM order_info oi LEFT JOIN staff_info si ON oi.handler_code = si.staff_code WHERE 1 = 1;
2023-03-12 21:07:10.000 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:07:10 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.remark , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime, si.staff_name AS handlerName, si.avatar AS handlerAvatar FROM order_info oi LEFT JOIN staff_info si ON oi.handler_code = si.staff_code WHERE 1 = 1 LIMIT 0,10;
2023-03-12 21:07:11.011 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:07:11.022 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:07:11 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM out_stock_record osr LEFT JOIN staff_info si1 ON osr.handler_code = si1.staff_code LEFT JOIN staff_info si2 ON osr.custodian_code = si2.staff_code WHERE 1 = 1;
2023-03-12 21:07:11.023 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:07:11 | 耗时 0 ms | SQL 语句：
SELECT osr.id, osr.code, osr.handler_code AS handlerCode, osr.custodian_code AS custodianCode, osr.create_date AS createDate, osr.remark, si1.staff_name AS handlerName, si2.staff_name AS custodianName, si1.avatar AS handlerAvatar, si2.avatar AS custodianAvatar FROM out_stock_record osr LEFT JOIN staff_info si1 on osr.handler_code = si1.staff_code LEFT JOIN staff_info si2 on osr.custodian_code = si2.staff_code WHERE 1 = 1 ORDER BY osr.create_date DESC LIMIT 0,10;
2023-03-12 21:07:13.299 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:07:13.308 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:07:13 | 耗时 3 ms | SQL 语句：
SELECT si.id, si.material_name AS materialName, si.material_type AS materialType, si.measurement_unit AS measurementUnit, si.quantity, si.transaction_type AS transactionType, si.create_date AS createDate, si.remark, si.model, si.unit_price AS unitPrice, pri.name AS materialTypeName FROM storehouse_info si LEFT JOIN out_stock_record osr on osr.code = si.delivery_order_number LEFT JOIN product_type_info pri ON (pri.id = si.material_type) WHERE 1 = 1 and osr.code = 'OUT-1665839738788' ORDER BY si.create_date DESC;
2023-03-12 21:07:22.120 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:07:22.132 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:07:22 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM product_type_info WHERE 1 = 1;
2023-03-12 21:07:22.133 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:07:22 | 耗时 0 ms | SQL 语句：
SELECT id, code, name, create_date FROM product_type_info WHERE 1 = 1 ORDER BY create_date DESC LIMIT 0,10;
2023-03-12 21:07:23.645 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:07:23.645 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:07:23.646 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:07:23.646 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:07:23.653 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT oi.create_time, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM order_info oi LEFT JOIN storehouse_info si ON si.delivery_order_number = oi.CODE ) AS l ON ( DATE_FORMAT( l.create_time, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:07:23.653 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:07:23.653 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:07:23.656 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT osr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM out_stock_record osr LEFT JOIN storehouse_info si ON si.delivery_order_number = osr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:07:23.657 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 3 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark FROM storage_record sr WHERE 1 = 1 AND YEAR(sr.create_date) = '2023' AND MONTH(sr.create_date) = '3';
2023-03-12 21:07:23.664 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT sr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM storage_record sr LEFT JOIN storehouse_info si ON si.inbound_order_number = sr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:07:23.675 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 1 ms | SQL 语句：
SELECT id,staff_code,year,month,income,basic_wage,post_allowance,performance_bonus,overtime_pay,holiday_costs,pension,unemployment,medical_insurance,tax,housing_fund,payroll,create_date,remark FROM salary_records WHERE year = '2023' AND month = '3';
2023-03-12 21:07:23.683 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 10 ms | SQL 语句：
SELECT id,material_name,material_type,measurement_unit,quantity,transaction_type,create_date,remark,model,unit_price,inbound_order_number,delivery_order_number FROM storehouse_info WHERE delivery_order_number IN ();
2023-03-12 21:07:23.724 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 18 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:07:23.726 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:07:23.727 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:07:23.728 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:07:23.729 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:07:23 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:08:56.876 febs [Thread-15] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-03-12 21:08:56.884 febs [Thread-15] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-03-12 21:08:56.884 febs [Thread-15] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-03-12 21:08:56.884 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626234208 shutting down.
2023-03-12 21:08:56.884 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626234208 paused.
2023-03-12 21:08:56.884 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626234208 shutdown complete.
2023-03-12 21:08:56.887 febs [Thread-15] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-03-12 21:08:56.887 febs [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-03-12 21:08:56.890 febs [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
2023-03-12 21:09:01.842 febs [main] INFO  cc.mrbird.febs.StoreApplication - Starting StoreApplication on WIN-KJDA35RA4FP with PID 12848 (started by Administrator in G:\Project\超市采购管理系统\store_purchase\backend)
2023-03-12 21:09:01.845 febs [main] INFO  cc.mrbird.febs.StoreApplication - No active profile set, falling back to default profiles: default
2023-03-12 21:09:02.552 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-03-12 21:09:02.553 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-03-12 21:09:02.604 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 30ms. Found 0 repository interfaces.
2023-03-12 21:09:02.841 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$b19c89ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:02.931 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:02.994 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$8bebd590] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.000 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.002 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.010 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$225d64bf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.021 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$8ddd6668] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.238 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$86a21dbc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.253 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.256 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.323 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.328 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$73e4c0ce] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.330 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.335 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$6025d159] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.341 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.342 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.344 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-03-12 21:09:03.349 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-03-12 21:09:03.491 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-03-12 21:09:03.492 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-03-12 21:09:03.492 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-03-12 21:09:03.492 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-03-12 21:09:03.492 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.502 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.508 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.992 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.997 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:03.999 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.000 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.016 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.017 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy110] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.023 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.023 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.024 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.053 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.068 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.086 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.087 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.089 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.105 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.106 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.125 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.126 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.129 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.144 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.160 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$7df0e450] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.163 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$303da669] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.165 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$eb548c58] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.170 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.172 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.177 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$12200386] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.181 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.183 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$5ffc81df] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.194 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.195 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.198 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.200 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.218 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.228 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.231 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.232 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.237 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.247 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:04.495 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-03-12 21:09:04.505 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-03-12 21:09:04.508 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-03-12 21:09:04.508 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-03-12 21:09:04.512 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_201\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\Bandizip\;F:\办公软件\Git\cmd;F:\nodejs\;F:\Yarn\bin\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Users\Administrator\AppData\Roaming\npm;C:\Users\Administrator\AppData\Local\Yarn\bin;.]
2023-03-12 21:09:04.608 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-03-12 21:09:04.608 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2712 ms
2023-03-12 21:09:05.117 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-03-12 21:09:05.117 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-03-12 21:09:05.117 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-03-12 21:09:05.117 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-03-12 21:09:05.117 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-03-12 21:09:05.118 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-03-12 21:09:05.118 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-03-12 21:09:05.118 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-03-12 21:09:05.639 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-03-12 21:09:05.649 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-03-12 21:09:05.649 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-03-12 21:09:05.652 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-03-12 21:09:05.654 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-03-12 21:09:05.654 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'WIN-KJDA35RA4FP1678626545640'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-03-12 21:09:05.654 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-03-12 21:09:05.654 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-03-12 21:09:05.655 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@e97f51c
2023-03-12 21:09:05.694 febs [main] INFO  p6spy - 2023-03-12 21:09:05 | 耗时 1 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-03-12 21:09:06.086 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-03-12 21:09:07.083 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-03-12 21:09:07.131 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-03-12 21:09:07.205 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-03-12 21:09:07.214 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-03-12 21:09:07.214 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-03-12 21:09:07.225 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-03-12 21:09:07.227 febs [main] INFO  cc.mrbird.febs.StoreApplication - Started StoreApplication in 5.76 seconds (JVM running for 6.375)
2023-03-12 21:09:07.234 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-03-12 21:09:07.235 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-03-12 21:09:07.235 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-03-12 21:09:07.265 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 2 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-03-12 21:09:07.271 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 2 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:07.327 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-03-12 21:09:07.338 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 2 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:07.346 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 1 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-03-12 21:09:07.350 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:07.353 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-03-12 21:09:07.356 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:07.358 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-03-12 21:09:07.361 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:07.363 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-03-12 21:09:07.365 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:07.366 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-03-12 21:09:07.368 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'xiaoduan' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:07.372 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 1 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'xiaoduan';
2023-03-12 21:09:07.375 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'xiaoduan' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:07.376 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-03-12 21:09:07.378 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:07.381 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test';
2023-03-12 21:09:07.382 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:07.384 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-03-12 21:09:07.385 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ddmtest14' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:07.388 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'ddmtest14';
2023-03-12 21:09:07.390 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'ddmtest14' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:07.391 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='33' ;
2023-03-12 21:09:07.392 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test1' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:07.395 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test1';
2023-03-12 21:09:07.397 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test1' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:07.398 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='34' ;
2023-03-12 21:09:07.399 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:07.400 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-03-12 21:09:07.402 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:07.407 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='35' ;
2023-03-12 21:09:07.408 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test33333' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:07.410 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test33333';
2023-03-12 21:09:07.411 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test33333' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:07.412 febs [main] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='36' ;
2023-03-12 21:09:07.413 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-03-12 21:09:07.413 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-03-12 21:09:07.413 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-03-12 21:09:07.413 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-03-12 21:09:07.413 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - 启动完毕，时间：2023-03-12T21:09:07.413
2023-03-12 21:09:07.816 febs [RMI TCP Connection(6)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-03-12 21:09:07.817 febs [RMI TCP Connection(6)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-03-12 21:09:07.828 febs [RMI TCP Connection(6)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 11 ms
2023-03-12 21:09:07.828 febs [RMI TCP Connection(5)-192.168.1.3] INFO  p6spy - 2023-03-12 21:09:07 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-03-12 21:09:12.426 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:09:12.426 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:09:12.426 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:09:12.426 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:09:12.468 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:09:12.468 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:09:12.468 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT oi.create_time, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM order_info oi LEFT JOIN storehouse_info si ON si.delivery_order_number = oi.CODE ) AS l ON ( DATE_FORMAT( l.create_time, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:09:12.471 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 1 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark FROM storage_record sr WHERE 1 = 1 AND YEAR(sr.create_date) = '2023' AND MONTH(sr.create_date) = '3';
2023-03-12 21:09:12.478 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT osr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM out_stock_record osr LEFT JOIN storehouse_info si ON si.delivery_order_number = osr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:09:12.487 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT sr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM storage_record sr LEFT JOIN storehouse_info si ON si.inbound_order_number = sr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:09:12.493 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,year,month,income,basic_wage,post_allowance,performance_bonus,overtime_pay,holiday_costs,pension,unemployment,medical_insurance,tax,housing_fund,payroll,create_date,remark FROM salary_records WHERE year = '2023' AND month = '3';
2023-03-12 21:09:12.511 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 19 ms | SQL 语句：
SELECT id,material_name,material_type,measurement_unit,quantity,transaction_type,create_date,remark,model,unit_price,inbound_order_number,delivery_order_number FROM storehouse_info WHERE delivery_order_number IN ();
2023-03-12 21:09:12.546 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:09:12.548 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:09:12.550 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:09:12.552 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:09:12.555 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:09:12 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:09:29.667 febs [Thread-15] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-03-12 21:09:29.674 febs [Thread-15] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-03-12 21:09:29.675 febs [Thread-15] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-03-12 21:09:29.675 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626545640 shutting down.
2023-03-12 21:09:29.675 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626545640 paused.
2023-03-12 21:09:29.675 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626545640 shutdown complete.
2023-03-12 21:09:29.678 febs [Thread-15] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-03-12 21:09:29.679 febs [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-03-12 21:09:29.681 febs [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
2023-03-12 21:09:34.644 febs [main] INFO  cc.mrbird.febs.StoreApplication - Starting StoreApplication on WIN-KJDA35RA4FP with PID 14860 (started by Administrator in G:\Project\超市采购管理系统\store_purchase\backend)
2023-03-12 21:09:34.647 febs [main] INFO  cc.mrbird.febs.StoreApplication - No active profile set, falling back to default profiles: default
2023-03-12 21:09:35.362 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-03-12 21:09:35.363 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-03-12 21:09:35.402 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 30ms. Found 0 repository interfaces.
2023-03-12 21:09:35.639 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$5ea8b10c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:35.728 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:35.790 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$38f7fcb0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:35.796 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:35.799 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:35.806 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$cf698bdf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:35.818 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$3ae98d88] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.052 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$33ae44dc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.067 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.070 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.138 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.143 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$20f0e7ee] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.147 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.151 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$d31f879] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.157 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.158 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.160 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-03-12 21:09:36.165 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-03-12 21:09:36.307 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-03-12 21:09:36.307 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-03-12 21:09:36.307 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-03-12 21:09:36.307 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-03-12 21:09:36.308 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.318 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.325 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.778 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.783 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.785 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.786 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.801 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.801 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy110] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.806 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.807 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.807 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.834 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.848 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.865 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.866 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.868 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.883 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.884 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.900 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.901 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.904 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.918 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.933 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$2afd0b70] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.936 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$dd49cd89] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.937 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$9860b378] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.942 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.944 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.948 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$bf2c2aa6] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.953 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.954 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$d08a8ff] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.964 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.966 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.969 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.971 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.987 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:36.997 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:37.000 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:37.000 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:37.006 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:37.015 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:09:37.261 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-03-12 21:09:37.270 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-03-12 21:09:37.273 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-03-12 21:09:37.273 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-03-12 21:09:37.278 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_201\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\Bandizip\;F:\办公软件\Git\cmd;F:\nodejs\;F:\Yarn\bin\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Users\Administrator\AppData\Roaming\npm;C:\Users\Administrator\AppData\Local\Yarn\bin;.]
2023-03-12 21:09:37.373 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-03-12 21:09:37.373 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2669 ms
2023-03-12 21:09:37.832 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-03-12 21:09:37.832 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-03-12 21:09:37.832 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-03-12 21:09:37.832 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-03-12 21:09:37.832 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-03-12 21:09:37.832 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-03-12 21:09:37.832 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-03-12 21:09:37.832 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-03-12 21:09:38.262 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-03-12 21:09:38.270 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-03-12 21:09:38.271 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-03-12 21:09:38.273 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-03-12 21:09:38.274 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-03-12 21:09:38.275 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'WIN-KJDA35RA4FP1678626578262'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-03-12 21:09:38.275 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-03-12 21:09:38.275 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-03-12 21:09:38.276 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@6f7b8ae1
2023-03-12 21:09:38.312 febs [main] INFO  p6spy - 2023-03-12 21:09:38 | 耗时 1 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-03-12 21:09:38.681 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-03-12 21:09:39.635 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-03-12 21:09:39.683 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-03-12 21:09:39.755 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-03-12 21:09:39.763 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-03-12 21:09:39.764 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-03-12 21:09:39.775 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-03-12 21:09:39.777 febs [main] INFO  cc.mrbird.febs.StoreApplication - Started StoreApplication in 5.526 seconds (JVM running for 6.157)
2023-03-12 21:09:39.785 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-03-12 21:09:39.785 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-03-12 21:09:39.785 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-03-12 21:09:39.810 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-03-12 21:09:39.814 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:39.870 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-03-12 21:09:39.880 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:39.888 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-03-12 21:09:39.892 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:39.895 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-03-12 21:09:39.897 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:39.900 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-03-12 21:09:39.902 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:39.904 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-03-12 21:09:39.906 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:39.908 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-03-12 21:09:39.910 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'xiaoduan' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:39.913 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'xiaoduan';
2023-03-12 21:09:39.915 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'xiaoduan' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:39.917 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-03-12 21:09:39.919 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:39.921 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test';
2023-03-12 21:09:39.922 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:39.923 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-03-12 21:09:39.925 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ddmtest14' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:39.927 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'ddmtest14';
2023-03-12 21:09:39.928 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'ddmtest14' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:39.930 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='33' ;
2023-03-12 21:09:39.932 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test1' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:39.936 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test1';
2023-03-12 21:09:39.937 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test1' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:39.939 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='34' ;
2023-03-12 21:09:39.940 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:39.942 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-03-12 21:09:39.945 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:39.949 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='35' ;
2023-03-12 21:09:39.951 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test33333' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:09:39.953 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test33333';
2023-03-12 21:09:39.955 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test33333' and m.perms is not null and m.perms <> '';
2023-03-12 21:09:39.956 febs [main] INFO  p6spy - 2023-03-12 21:09:39 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='36' ;
2023-03-12 21:09:39.956 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-03-12 21:09:39.956 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-03-12 21:09:39.956 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-03-12 21:09:39.956 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-03-12 21:09:39.956 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - 启动完毕，时间：2023-03-12T21:09:39.956
2023-03-12 21:09:40.435 febs [RMI TCP Connection(2)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-03-12 21:09:40.435 febs [RMI TCP Connection(2)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-03-12 21:09:40.445 febs [RMI TCP Connection(2)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 10 ms
2023-03-12 21:09:40.446 febs [RMI TCP Connection(1)-192.168.1.3] INFO  p6spy - 2023-03-12 21:09:40 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-03-12 21:09:57.160 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:09:57.160 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:09:57.160 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:09:57.160 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:09:57.202 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:09:57.202 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:09:57.202 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT oi.create_time, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM order_info oi LEFT JOIN storehouse_info si ON si.delivery_order_number = oi.CODE ) AS l ON ( DATE_FORMAT( l.create_time, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:09:57.204 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark FROM storage_record sr WHERE 1 = 1 AND YEAR(sr.create_date) = '2023' AND MONTH(sr.create_date) = '3';
2023-03-12 21:09:57.212 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT osr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM out_stock_record osr LEFT JOIN storehouse_info si ON si.delivery_order_number = osr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:09:57.220 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT sr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM storage_record sr LEFT JOIN storehouse_info si ON si.inbound_order_number = sr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:09:57.227 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,year,month,income,basic_wage,post_allowance,performance_bonus,overtime_pay,holiday_costs,pension,unemployment,medical_insurance,tax,housing_fund,payroll,create_date,remark FROM salary_records WHERE year = '2023' AND month = '3';
2023-03-12 21:09:57.258 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:09:57.259 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:09:57.261 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:09:57.263 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:09:57.266 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:09:57 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:11:29.374 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:11:29.376 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:11:29.377 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:11:29.377 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:11:29.378 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:11:29.380 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:11:29.380 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:11:29.381 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT oi.create_time, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM order_info oi LEFT JOIN storehouse_info si ON si.delivery_order_number = oi.CODE ) AS l ON ( DATE_FORMAT( l.create_time, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:11:29.381 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:11:29.382 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark FROM storage_record sr WHERE 1 = 1 AND YEAR(sr.create_date) = '2023' AND MONTH(sr.create_date) = '3';
2023-03-12 21:11:29.383 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:11:29.383 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT osr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM out_stock_record osr LEFT JOIN storehouse_info si ON si.delivery_order_number = osr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:11:29.384 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:11:29.384 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,year,month,income,basic_wage,post_allowance,performance_bonus,overtime_pay,holiday_costs,pension,unemployment,medical_insurance,tax,housing_fund,payroll,create_date,remark FROM salary_records WHERE year = '2023' AND month = '3';
2023-03-12 21:11:29.385 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT sr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM storage_record sr LEFT JOIN storehouse_info si ON si.inbound_order_number = sr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:11:29.386 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:11:29 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:12:54.109 febs [Thread-15] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-03-12 21:12:54.116 febs [Thread-15] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-03-12 21:12:54.117 febs [Thread-15] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-03-12 21:12:54.117 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626578262 shutting down.
2023-03-12 21:12:54.117 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626578262 paused.
2023-03-12 21:12:54.117 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626578262 shutdown complete.
2023-03-12 21:12:54.120 febs [Thread-15] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-03-12 21:12:54.120 febs [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-03-12 21:12:54.122 febs [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
2023-03-12 21:12:59.034 febs [main] INFO  cc.mrbird.febs.StoreApplication - Starting StoreApplication on WIN-KJDA35RA4FP with PID 13040 (started by Administrator in G:\Project\超市采购管理系统\store_purchase\backend)
2023-03-12 21:12:59.037 febs [main] INFO  cc.mrbird.febs.StoreApplication - No active profile set, falling back to default profiles: default
2023-03-12 21:12:59.688 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-03-12 21:12:59.698 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-03-12 21:12:59.736 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28ms. Found 0 repository interfaces.
2023-03-12 21:12:59.969 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$491da7ef] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.058 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.121 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$236cf393] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.128 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.130 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.137 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b9de82c2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.149 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$255e846b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.367 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$1e233bbf] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.381 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.385 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.449 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.454 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$b65ded1] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.457 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.461 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$f7a6ef5c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.467 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.468 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.470 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-03-12 21:13:00.475 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-03-12 21:13:00.614 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-03-12 21:13:00.614 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-03-12 21:13:00.615 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-03-12 21:13:00.615 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-03-12 21:13:00.615 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.624 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:00.631 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.088 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.093 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.096 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.098 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.127 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.128 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy110] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.137 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.139 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.140 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.172 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.186 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.203 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.204 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.206 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.223 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.224 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.243 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.244 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.247 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.261 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.277 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$15720253] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.281 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$c7bec46c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.283 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$82d5aa5b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.287 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.290 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.295 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$a9a12189] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.299 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.301 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$f77d9fe2] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.311 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.313 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.316 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.318 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.334 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.342 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.346 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.346 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.351 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.360 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:13:01.652 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-03-12 21:13:01.661 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-03-12 21:13:01.664 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-03-12 21:13:01.664 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-03-12 21:13:01.668 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_201\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\Bandizip\;F:\办公软件\Git\cmd;F:\nodejs\;F:\Yarn\bin\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Users\Administrator\AppData\Roaming\npm;C:\Users\Administrator\AppData\Local\Yarn\bin;.]
2023-03-12 21:13:01.759 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-03-12 21:13:01.759 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2692 ms
2023-03-12 21:13:02.233 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-03-12 21:13:02.233 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-03-12 21:13:02.233 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-03-12 21:13:02.233 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-03-12 21:13:02.233 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-03-12 21:13:02.234 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-03-12 21:13:02.234 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-03-12 21:13:02.234 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-03-12 21:13:02.659 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-03-12 21:13:02.668 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-03-12 21:13:02.668 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-03-12 21:13:02.670 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-03-12 21:13:02.672 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-03-12 21:13:02.672 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'WIN-KJDA35RA4FP1678626782660'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-03-12 21:13:02.672 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-03-12 21:13:02.672 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-03-12 21:13:02.673 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@4be7acd9
2023-03-12 21:13:02.710 febs [main] INFO  p6spy - 2023-03-12 21:13:02 | 耗时 1 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-03-12 21:13:03.076 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-03-12 21:13:04.030 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-03-12 21:13:04.077 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-03-12 21:13:04.150 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-03-12 21:13:04.158 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-03-12 21:13:04.158 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-03-12 21:13:04.169 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-03-12 21:13:04.171 febs [main] INFO  cc.mrbird.febs.StoreApplication - Started StoreApplication in 5.53 seconds (JVM running for 6.136)
2023-03-12 21:13:04.178 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-03-12 21:13:04.178 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-03-12 21:13:04.179 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-03-12 21:13:04.202 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-03-12 21:13:04.206 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:13:04.258 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-03-12 21:13:04.268 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-03-12 21:13:04.278 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-03-12 21:13:04.282 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:13:04.285 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-03-12 21:13:04.287 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-03-12 21:13:04.290 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-03-12 21:13:04.291 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:13:04.294 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-03-12 21:13:04.296 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-03-12 21:13:04.298 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-03-12 21:13:04.299 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'xiaoduan' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:13:04.303 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'xiaoduan';
2023-03-12 21:13:04.304 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'xiaoduan' and m.perms is not null and m.perms <> '';
2023-03-12 21:13:04.306 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-03-12 21:13:04.307 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:13:04.309 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test';
2023-03-12 21:13:04.310 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test' and m.perms is not null and m.perms <> '';
2023-03-12 21:13:04.311 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-03-12 21:13:04.313 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ddmtest14' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:13:04.315 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'ddmtest14';
2023-03-12 21:13:04.316 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'ddmtest14' and m.perms is not null and m.perms <> '';
2023-03-12 21:13:04.318 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='33' ;
2023-03-12 21:13:04.320 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test1' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:13:04.324 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test1';
2023-03-12 21:13:04.326 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test1' and m.perms is not null and m.perms <> '';
2023-03-12 21:13:04.328 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='34' ;
2023-03-12 21:13:04.329 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:13:04.332 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-03-12 21:13:04.334 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-03-12 21:13:04.339 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='35' ;
2023-03-12 21:13:04.341 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test33333' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:13:04.342 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test33333';
2023-03-12 21:13:04.344 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test33333' and m.perms is not null and m.perms <> '';
2023-03-12 21:13:04.345 febs [main] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='36' ;
2023-03-12 21:13:04.345 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-03-12 21:13:04.345 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-03-12 21:13:04.345 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-03-12 21:13:04.345 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-03-12 21:13:04.345 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - 启动完毕，时间：2023-03-12T21:13:04.345
2023-03-12 21:13:04.813 febs [RMI TCP Connection(1)-192.168.1.3] INFO  p6spy - 2023-03-12 21:13:04 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-03-12 21:13:04.863 febs [RMI TCP Connection(3)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-03-12 21:13:04.863 febs [RMI TCP Connection(3)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-03-12 21:13:04.872 febs [RMI TCP Connection(3)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 9 ms
2023-03-12 21:14:48.935 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:14:48.935 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:14:48.935 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:14:48.935 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:14:48.974 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:14:48 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:14:48.974 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:14:48 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:14:48.975 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:14:48 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT oi.create_time, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM order_info oi LEFT JOIN storehouse_info si ON si.delivery_order_number = oi.CODE ) AS l ON ( DATE_FORMAT( l.create_time, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:14:48.977 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:14:48 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark FROM storage_record sr WHERE 1 = 1 AND YEAR(sr.create_date) = '2023' AND MONTH(sr.create_date) = '3';
2023-03-12 21:14:48.986 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:14:48 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT osr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM out_stock_record osr LEFT JOIN storehouse_info si ON si.delivery_order_number = osr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:14:48.993 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:14:48 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT sr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM storage_record sr LEFT JOIN storehouse_info si ON si.inbound_order_number = sr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:14:49.003 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:14:49 | 耗时 1 ms | SQL 语句：
SELECT id,staff_code,year,month,income,basic_wage,post_allowance,performance_bonus,overtime_pay,holiday_costs,pension,unemployment,medical_insurance,tax,housing_fund,payroll,create_date,remark FROM salary_records WHERE year = '2023' AND month = '3';
2023-03-12 21:14:49.033 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:14:49 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:14:49.035 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:14:49 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:14:49.036 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:14:49 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:14:49.038 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:14:49 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:14:49.040 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:14:49 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:17:53.434 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:17:53.434 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:17:53.435 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:17:53.435 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:17:53.438 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:17:53.438 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:17:53.438 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:17:53.438 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT oi.create_time, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM order_info oi LEFT JOIN storehouse_info si ON si.delivery_order_number = oi.CODE ) AS l ON ( DATE_FORMAT( l.create_time, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:17:53.439 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:17:53.439 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark FROM storage_record sr WHERE 1 = 1 AND YEAR(sr.create_date) = '2023' AND MONTH(sr.create_date) = '3';
2023-03-12 21:17:53.440 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT osr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM out_stock_record osr LEFT JOIN storehouse_info si ON si.delivery_order_number = osr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:17:53.441 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:17:53.442 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:17:53.442 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,year,month,income,basic_wage,post_allowance,performance_bonus,overtime_pay,holiday_costs,pension,unemployment,medical_insurance,tax,housing_fund,payroll,create_date,remark FROM salary_records WHERE year = '2023' AND month = '3';
2023-03-12 21:17:53.443 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT sr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM storage_record sr LEFT JOIN storehouse_info si ON si.inbound_order_number = sr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:17:53.445 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:17:53 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:18:03.245 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:18:03.245 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:18:03.245 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:18:03.248 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:18:03.248 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:18:03.249 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT oi.create_time, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM order_info oi LEFT JOIN storehouse_info si ON si.delivery_order_number = oi.CODE ) AS l ON ( DATE_FORMAT( l.create_time, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:18:03.251 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark FROM storage_record sr WHERE 1 = 1 AND YEAR(sr.create_date) = '2023' AND MONTH(sr.create_date) = '3';
2023-03-12 21:18:03.251 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT osr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM out_stock_record osr LEFT JOIN storehouse_info si ON si.delivery_order_number = osr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:18:03.253 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,year,month,income,basic_wage,post_allowance,performance_bonus,overtime_pay,holiday_costs,pension,unemployment,medical_insurance,tax,housing_fund,payroll,create_date,remark FROM salary_records WHERE year = '2023' AND month = '3';
2023-03-12 21:18:03.253 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT sr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM storage_record sr LEFT JOIN storehouse_info si ON si.inbound_order_number = sr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:18:03.254 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:18:03.257 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:18:03.260 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:18:03.262 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:18:03.264 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:18:03.267 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:18:03 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:18:35.453 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:18:35.453 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:18:35.453 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:18:35.453 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:18:35.456 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:18:35.456 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:18:35.456 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:18:35.457 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT oi.create_time, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM order_info oi LEFT JOIN storehouse_info si ON si.delivery_order_number = oi.CODE ) AS l ON ( DATE_FORMAT( l.create_time, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:18:35.457 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:18:35.458 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark FROM storage_record sr WHERE 1 = 1 AND YEAR(sr.create_date) = '2023' AND MONTH(sr.create_date) = '3';
2023-03-12 21:18:35.459 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:18:35.461 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:18:35.461 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT osr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM out_stock_record osr LEFT JOIN storehouse_info si ON si.delivery_order_number = osr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:18:35.462 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,year,month,income,basic_wage,post_allowance,performance_bonus,overtime_pay,holiday_costs,pension,unemployment,medical_insurance,tax,housing_fund,payroll,create_date,remark FROM salary_records WHERE year = '2023' AND month = '3';
2023-03-12 21:18:35.463 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:18:35.463 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:18:35 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT sr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM storage_record sr LEFT JOIN storehouse_info si ON si.inbound_order_number = sr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:19:14.513 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:19:14.517 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:19:14.518 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:19:14.520 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:19:14.522 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:19:14.523 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:19:14.581 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:19:14.581 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:19:14.581 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:19:14.584 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:19:14.584 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:19:14.585 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT oi.create_time, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM order_info oi LEFT JOIN storehouse_info si ON si.delivery_order_number = oi.CODE ) AS l ON ( DATE_FORMAT( l.create_time, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:19:14.586 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark FROM storage_record sr WHERE 1 = 1 AND YEAR(sr.create_date) = '2023' AND MONTH(sr.create_date) = '3';
2023-03-12 21:19:14.587 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT osr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM out_stock_record osr LEFT JOIN storehouse_info si ON si.delivery_order_number = osr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:19:14.589 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,year,month,income,basic_wage,post_allowance,performance_bonus,overtime_pay,holiday_costs,pension,unemployment,medical_insurance,tax,housing_fund,payroll,create_date,remark FROM salary_records WHERE year = '2023' AND month = '3';
2023-03-12 21:19:14.589 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:19:14 | 耗时 1 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT sr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM storage_record sr LEFT JOIN storehouse_info si ON si.inbound_order_number = sr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:19:18.991 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:19:18.997 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:19:18 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:19:18.999 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:19:18 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:19:19.000 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:19:19 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:19:19.003 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:19:19 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:19:19.005 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:19:19 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:19:19.136 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:19:19.136 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:19:19.136 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:19:19.139 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:19:19 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:19:19.139 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:19:19 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:19:19.139 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:19:19 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT oi.create_time, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM order_info oi LEFT JOIN storehouse_info si ON si.delivery_order_number = oi.CODE ) AS l ON ( DATE_FORMAT( l.create_time, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:19:19.140 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:19:19 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark FROM storage_record sr WHERE 1 = 1 AND YEAR(sr.create_date) = '2023' AND MONTH(sr.create_date) = '3';
2023-03-12 21:19:19.141 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:19:19 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT osr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM out_stock_record osr LEFT JOIN storehouse_info si ON si.delivery_order_number = osr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:19:19.143 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:19:19 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,year,month,income,basic_wage,post_allowance,performance_bonus,overtime_pay,holiday_costs,pension,unemployment,medical_insurance,tax,housing_fund,payroll,create_date,remark FROM salary_records WHERE year = '2023' AND month = '3';
2023-03-12 21:19:19.143 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:19:19 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT sr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM storage_record sr LEFT JOIN storehouse_info si ON si.inbound_order_number = sr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:20:06.798 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:20:06.801 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:20:06 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:20:06.802 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:20:06 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:20:06.803 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:20:06 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:20:06.804 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:20:06 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:20:06.805 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:20:06 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:20:10.598 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:20:10.602 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:20:10 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:20:10.604 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:20:10 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:20:10.606 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:20:10 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:20:10.608 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:20:10 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:20:10.610 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:20:10 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:21:05.545 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:21:05.545 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:21:05.545 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:21:05.545 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:21:05.548 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:21:05.548 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:21:05.548 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime FROM order_info oi WHERE 1 = 1 AND YEAR(oi.create_time) = '2023' AND MONTH(oi.create_time) = '3';
2023-03-12 21:21:05.548 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT oi.create_time, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM order_info oi LEFT JOIN storehouse_info si ON si.delivery_order_number = oi.CODE ) AS l ON ( DATE_FORMAT( l.create_time, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:21:05.550 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:21:05.550 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark FROM storage_record sr WHERE 1 = 1 AND YEAR(sr.create_date) = '2023' AND MONTH(sr.create_date) = '3';
2023-03-12 21:21:05.550 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT osr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM out_stock_record osr LEFT JOIN storehouse_info si ON si.delivery_order_number = osr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:21:05.551 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:21:05.552 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,year,month,income,basic_wage,post_allowance,performance_bonus,overtime_pay,holiday_costs,pension,unemployment,medical_insurance,tax,housing_fund,payroll,create_date,remark FROM salary_records WHERE year = '2023' AND month = '3';
2023-03-12 21:21:05.552 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
SELECT date_format( spo.days, '%m-%d' ) days, sum( l.quantity ) AS quantity, sum( l.totalPrice ) AS totalPrice FROM ( SELECT DATE_SUB( curdate(), INTERVAL + 0 DAY ) days UNION SELECT DATE_SUB( curdate(), INTERVAL + 1 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 2 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 3 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 4 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 5 DAY ) UNION SELECT DATE_SUB( curdate(), INTERVAL + 6 DAY ) ) AS spo LEFT JOIN ( SELECT sr.create_date, si.material_type, si.quantity, si.unit_price * si.quantity AS totalPrice FROM storage_record sr LEFT JOIN storehouse_info si ON si.inbound_order_number = sr.CODE ) AS l ON ( DATE_FORMAT( l.create_date, '%Y-%m-%d' ) = DATE_FORMAT( spo.days, '%Y-%m-%d' )) GROUP BY days;
2023-03-12 21:21:05.552 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:21:05.554 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:21:05 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:21:28.225 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:21:28.229 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:21:28 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:21:28.230 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:21:28 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:21:28.231 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:21:28 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:21:28.233 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:21:28 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:21:28.235 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:21:28 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:25:15.300 febs [http-nio-9527-exec-7] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-03-12 21:25:15.316 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:25:15 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-03-12T21:25:15.306+0800' WHERE username = 'system';
2023-03-12 21:25:15.319 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:25:15 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'system' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:25:15.331 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 21:25:15 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'system', '2023-03-12T21:25:15.323+0800', '', '127.0.0.1' );
2023-03-12 21:25:15.355 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:25:15 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = 'system';
2023-03-12 21:25:15.359 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:25:15 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = 'system';
2023-03-12 21:25:19.238 febs [http-nio-9527-exec-2] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 2 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-03-12 21:25:19.243 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:25:19 | 耗时 2 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-03-12T21:25:19.239+0800' WHERE username = 'admin';
2023-03-12 21:25:19.245 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:25:19 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:25:19.251 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:25:19 | 耗时 0 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'admin', '2023-03-12T21:25:19.249+0800', '', '127.0.0.1' );
2023-03-12 21:25:19.265 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:25:19.275 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:25:19 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin') order by m.order_num;
2023-03-12 21:25:19.488 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:25:19.492 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:25:19 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:25:19.493 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:25:19 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:25:19.495 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:25:19 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:25:19.497 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:25:19 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:25:19.500 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:25:19 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'admin' group by days;
2023-03-12 21:25:25.899 febs [http-nio-9527-exec-4] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 3 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-03-12 21:25:25.902 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:25:25 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = 'system';
2023-03-12 21:26:53.446 febs [Thread-15] INFO  o.s.s.c.ThreadPoolTaskScheduler - Shutting down ExecutorService 'taskScheduler'
2023-03-12 21:26:53.453 febs [Thread-15] INFO  o.s.s.c.ThreadPoolTaskExecutor - Shutting down ExecutorService 'taskExecutor'
2023-03-12 21:26:53.453 febs [Thread-15] INFO  o.s.s.quartz.SchedulerFactoryBean - Shutting down Quartz Scheduler
2023-03-12 21:26:53.454 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626782660 shutting down.
2023-03-12 21:26:53.454 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626782660 paused.
2023-03-12 21:26:53.454 febs [Thread-15] INFO  org.quartz.core.QuartzScheduler - Scheduler MyScheduler_$_WIN-KJDA35RA4FP1678626782660 shutdown complete.
2023-03-12 21:26:53.457 febs [Thread-15] INFO  c.b.d.d.DynamicRoutingDataSource - closing dynamicDatasource  ing....
2023-03-12 21:26:53.457 febs [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown initiated...
2023-03-12 21:26:53.459 febs [Thread-15] INFO  com.zaxxer.hikari.HikariDataSource - primary - Shutdown completed.
2023-03-12 21:26:56.036 febs [main] INFO  cc.mrbird.febs.StoreApplication - Starting StoreApplication on WIN-KJDA35RA4FP with PID 7844 (started by Administrator in G:\Project\超市采购管理系统\store_purchase\backend)
2023-03-12 21:26:56.065 febs [main] INFO  cc.mrbird.febs.StoreApplication - No active profile set, falling back to default profiles: default
2023-03-12 21:26:56.727 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode!
2023-03-12 21:26:56.729 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data repositories in DEFAULT mode.
2023-03-12 21:26:56.776 febs [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 28ms. Found 0 repository interfaces.
2023-03-12 21:26:57.006 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'asyncExecutorPoolConfig' of type [cc.mrbird.febs.common.config.AsyncExecutorPoolConfig$$EnhancerBySpringCGLIB$$d193bba3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.097 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource.dynamic-com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.159 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration' of type [com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration$$EnhancerBySpringCGLIB$$abe30747] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.165 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dsProcessor' of type [com.baomidou.dynamic.datasource.processor.DsHeaderProcessor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.167 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDatasourceAnnotationAdvisor' of type [com.baomidou.dynamic.datasource.aop.DynamicDataSourceAnnotationAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.175 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$42549676] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.186 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroConfig' of type [cc.mrbird.febs.common.authentication.ShiroConfig$$EnhancerBySpringCGLIB$$add4981f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.401 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisConfig' of type [cc.mrbird.febs.common.config.RedisConfig$$EnhancerBySpringCGLIB$$a6994f73] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.416 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisPoolFactory' of type [redis.clients.jedis.JedisPool] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.419 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'redisService' of type [cc.mrbird.febs.common.service.impl.RedisServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.484 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatis-plus-com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.489 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'mybatisPlusConfig' of type [cc.mrbird.febs.common.config.MybatisPlusConfig$$EnhancerBySpringCGLIB$$93dbf285] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.492 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'paginationInterceptor' of type [com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.496 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration' of type [com.baomidou.mybatisplus.autoconfigure.MybatisPlusAutoConfiguration$$EnhancerBySpringCGLIB$$801d0310] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.502 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceCreator' of type [com.baomidou.dynamic.datasource.DynamicDataSourceCreator] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.503 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dynamicDataSourceProvider' of type [com.baomidou.dynamic.datasource.provider.YmlDynamicDataSourceProvider] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.505 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-检测到并开启了p6spy
2023-03-12 21:26:57.510 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Starting...
2023-03-12 21:26:57.650 febs [main] INFO  com.zaxxer.hikari.HikariDataSource - primary - Start completed.
2023-03-12 21:26:57.650 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 初始共加载 1 个数据源
2023-03-12 21:26:57.651 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 动态数据源-加载 primary 成功
2023-03-12 21:26:57.651 febs [main] INFO  c.b.d.d.DynamicRoutingDataSource - 当前的默认数据源是单数据源，数据源名为 primary
2023-03-12 21:26:57.651 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'dataSource' of type [com.baomidou.dynamic.datasource.DynamicRoutingDataSource] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.661 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:57.668 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.122 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.127 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.129 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.130 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMapper' of type [com.sun.proxy.$Proxy108] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.146 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.147 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuMapper' of type [com.sun.proxy.$Proxy110] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.152 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.152 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleMapper' of type [com.sun.proxy.$Proxy111] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.153 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userRoleService' of type [cc.mrbird.febs.system.service.impl.UserRoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.181 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleMenuService' of type [cc.mrbird.febs.system.service.impl.RoleMenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.195 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'roleService' of type [cc.mrbird.febs.system.service.impl.RoleServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.212 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.213 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuMapper' of type [com.sun.proxy.$Proxy115] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.214 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'menuService' of type [cc.mrbird.febs.system.service.impl.MenuServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.230 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.231 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userMapper' of type [com.sun.proxy.$Proxy117] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.248 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [org.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.249 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigMapper' of type [com.sun.proxy.$Proxy118] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.251 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userConfigService' of type [cc.mrbird.febs.system.service.impl.UserConfigServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.266 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userService' of type [cc.mrbird.febs.system.service.impl.UserServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.281 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$9de81607] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.284 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$5034d820] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.286 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$b4bbe0f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.292 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties' of type [org.springframework.boot.autoconfigure.jackson.JacksonProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.294 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'standardJacksonObjectMapperBuilderCustomizer' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.299 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration$$EnhancerBySpringCGLIB$$3217353d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.303 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'parameterNamesModule' of type [com.fasterxml.jackson.module.paramnames.ParameterNamesModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.305 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration' of type [org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$7ff3b396] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.315 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jsonComponentModule' of type [org.springframework.boot.jackson.JsonComponentModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.316 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.data.web.config.SpringDataJacksonConfiguration' of type [org.springframework.data.web.config.SpringDataJacksonConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.319 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonGeoModule' of type [org.springframework.data.geo.GeoModule] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.321 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapperBuilder' of type [org.springframework.http.converter.json.Jackson2ObjectMapperBuilder] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.339 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'jacksonObjectMapper' of type [com.fasterxml.jackson.databind.ObjectMapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.347 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'cacheService' of type [cc.mrbird.febs.common.service.impl.CacheServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.351 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'userManager' of type [cc.mrbird.febs.system.manager.UserManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.351 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'shiroRealm' of type [cc.mrbird.febs.common.authentication.ShiroRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.357 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.366 febs [main] INFO  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2023-03-12 21:26:58.607 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port(s): 9527 (http)
2023-03-12 21:26:58.616 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-9527"]
2023-03-12 21:26:58.619 febs [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2023-03-12 21:26:58.619 febs [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet Engine: Apache Tomcat/9.0.12
2023-03-12 21:26:58.623 febs [main] INFO  o.a.c.core.AprLifecycleListener - The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [C:\Program Files\Java\jdk1.8.0_201\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;D:\Bandizip\;F:\办公软件\Git\cmd;F:\nodejs\;F:\Yarn\bin\;C:\Users\Administrator\AppData\Local\Microsoft\WindowsApps;C:\Users\Administrator\AppData\Roaming\npm;C:\Users\Administrator\AppData\Local\Yarn\bin;.]
2023-03-12 21:26:58.719 febs [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2023-03-12 21:26:58.719 febs [main] INFO  o.s.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 2625 ms
2023-03-12 21:26:59.172 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'characterEncodingFilter' to: [/*]
2023-03-12 21:26:59.173 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'webMvcMetricsFilter' to: [/*]
2023-03-12 21:26:59.173 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'hiddenHttpMethodFilter' to: [/*]
2023-03-12 21:26:59.173 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'formContentFilter' to: [/*]
2023-03-12 21:26:59.173 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'requestContextFilter' to: [/*]
2023-03-12 21:26:59.173 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'httpTraceFilter' to: [/*]
2023-03-12 21:26:59.173 febs [main] INFO  o.s.b.w.s.FilterRegistrationBean - Mapping filter: 'shiroFilterFactoryBean' to: [/*]
2023-03-12 21:26:59.173 febs [main] INFO  o.s.b.w.s.ServletRegistrationBean - Servlet dispatcherServlet mapped to [/]
2023-03-12 21:26:59.588 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Using default implementation for ThreadExecutor
2023-03-12 21:26:59.597 febs [main] INFO  o.quartz.core.SchedulerSignalerImpl - Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
2023-03-12 21:26:59.597 febs [main] INFO  org.quartz.core.QuartzScheduler - Quartz Scheduler v.2.3.0 created.
2023-03-12 21:26:59.599 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - Using db table-based data access locking (synchronization).
2023-03-12 21:26:59.601 febs [main] INFO  o.s.s.quartz.LocalDataSourceJobStore - JobStoreCMT initialized.
2023-03-12 21:26:59.601 febs [main] INFO  org.quartz.core.QuartzScheduler - Scheduler meta-data: Quartz Scheduler (v2.3.0) 'MyScheduler' with instanceId 'WIN-KJDA35RA4FP1678627619589'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 20 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

2023-03-12 21:26:59.601 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler 'MyScheduler' initialized from an externally provided properties instance.
2023-03-12 21:26:59.601 febs [main] INFO  org.quartz.impl.StdSchedulerFactory - Quartz scheduler version: 2.3.0
2023-03-12 21:26:59.602 febs [main] INFO  org.quartz.core.QuartzScheduler - JobFactory set to: org.springframework.scheduling.quartz.AdaptableJobFactory@1eddca25
2023-03-12 21:26:59.639 febs [main] INFO  p6spy - 2023-03-12 21:26:59 | 耗时 1 ms | SQL 语句：
select job_id jobId, bean_name beanName, method_name methodName, params, cron_expression cronExpression, status, remark, create_time createTime from t_job order by job_id;
2023-03-12 21:27:00.014 febs [main] INFO  o.s.s.c.ThreadPoolTaskExecutor - Initializing ExecutorService 'taskExecutor'
2023-03-12 21:27:00.966 febs [main] INFO  o.s.s.c.ThreadPoolTaskScheduler - Initializing ExecutorService 'taskScheduler'
2023-03-12 21:27:01.012 febs [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 2 endpoint(s) beneath base path '/actuator'
2023-03-12 21:27:01.083 febs [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-9527"]
2023-03-12 21:27:01.091 febs [scheduling-1] INFO  cc.mrbird.febs.common.task.CacheTask - delete expired user
2023-03-12 21:27:01.091 febs [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read
2023-03-12 21:27:01.103 febs [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port(s): 9527 (http) with context path ''
2023-03-12 21:27:01.105 febs [main] INFO  cc.mrbird.febs.StoreApplication - Started StoreApplication in 5.438 seconds (JVM running for 6.062)
2023-03-12 21:27:01.112 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - Redis连接中 ······
2023-03-12 21:27:01.112 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存初始化 ······
2023-03-12 21:27:01.113 febs [main] INFO  c.m.f.common.runner.CacheInitRunner - 缓存用户数据 ······
2023-03-12 21:27:01.136 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user;
2023-03-12 21:27:01.141 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'mrbird' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:27:01.191 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'mrbird';
2023-03-12 21:27:01.203 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 1 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'mrbird' and m.perms is not null and m.perms <> '';
2023-03-12 21:27:01.210 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='1' ;
2023-03-12 21:27:01.214 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'scott' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:27:01.217 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'scott';
2023-03-12 21:27:01.220 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'scott' and m.perms is not null and m.perms <> '';
2023-03-12 21:27:01.222 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='2' ;
2023-03-12 21:27:01.224 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'jack' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:27:01.226 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'jack';
2023-03-12 21:27:01.228 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'jack' and m.perms is not null and m.perms <> '';
2023-03-12 21:27:01.229 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='12' ;
2023-03-12 21:27:01.231 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'xiaoduan' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:27:01.234 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'xiaoduan';
2023-03-12 21:27:01.236 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'xiaoduan' and m.perms is not null and m.perms <> '';
2023-03-12 21:27:01.237 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='13' ;
2023-03-12 21:27:01.238 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:27:01.240 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test';
2023-03-12 21:27:01.241 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test' and m.perms is not null and m.perms <> '';
2023-03-12 21:27:01.242 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='16' ;
2023-03-12 21:27:01.244 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'ddmtest14' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:27:01.248 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'ddmtest14';
2023-03-12 21:27:01.250 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'ddmtest14' and m.perms is not null and m.perms <> '';
2023-03-12 21:27:01.251 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='33' ;
2023-03-12 21:27:01.253 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test1' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:27:01.255 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test1';
2023-03-12 21:27:01.256 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test1' and m.perms is not null and m.perms <> '';
2023-03-12 21:27:01.257 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='34' ;
2023-03-12 21:27:01.259 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'admin' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:27:01.261 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'admin';
2023-03-12 21:27:01.263 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'admin' and m.perms is not null and m.perms <> '';
2023-03-12 21:27:01.268 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='35' ;
2023-03-12 21:27:01.270 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'test33333' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:27:01.272 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'test33333';
2023-03-12 21:27:01.274 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'test33333' and m.perms is not null and m.perms <> '';
2023-03-12 21:27:01.275 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='36' ;
2023-03-12 21:27:01.276 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'system' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:27:01.277 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select r.* from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'system';
2023-03-12 21:27:01.279 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
select distinct m.perms from t_role r left join t_user_role ur on (r.role_id = ur.role_id) left join t_user u on (u.user_id = ur.user_id) left join t_role_menu rm on (rm.role_id = r.role_id) left join t_menu m on (m.menu_id = rm.menu_id) where u.username = 'system' and m.perms is not null and m.perms <> '';
2023-03-12 21:27:01.280 febs [main] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
SELECT USER_ID,theme,layout,multi_page,fix_siderbar,fix_header,color FROM t_user_config WHERE USER_ID='37' ;
2023-03-12 21:27:01.281 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -  __    ___   _      ___   _     ____ _____  ____ 
2023-03-12 21:27:01.281 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - / /`  / / \ | |\/| | |_) | |   | |_   | |  | |_  
2023-03-12 21:27:01.281 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - \_\_, \_\_/ |_|  | |_|   |_|__ |_|__  |_|  |_|__ 
2023-03-12 21:27:01.281 febs [main] INFO  c.m.f.common.runner.StartedUpRunner -                                                       
2023-03-12 21:27:01.281 febs [main] INFO  c.m.f.common.runner.StartedUpRunner - 启动完毕，时间：2023-03-12T21:27:01.281
2023-03-12 21:27:01.366 febs [RMI TCP Connection(2)-192.168.1.3] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2023-03-12 21:27:01.366 febs [RMI TCP Connection(2)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2023-03-12 21:27:01.377 febs [RMI TCP Connection(2)-192.168.1.3] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 11 ms
2023-03-12 21:27:01.382 febs [RMI TCP Connection(1)-192.168.1.3] INFO  p6spy - 2023-03-12 21:27:01 | 耗时 0 ms | SQL 语句：
/* ping */ SELECT 1;
2023-03-12 21:27:16.696 febs [http-nio-9527-exec-1] INFO  c.m.febs.common.aspect.LimitAspect - IP:127.0.0.1 第 1 次访问key为 [limit_login127.0.0.1]，描述为 [登录接口] 的接口
2023-03-12 21:27:16.791 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:27:16 | 耗时 1 ms | SQL 语句：
UPDATE t_user SET last_login_time='2023-03-12T21:27:16.769+0800' WHERE username = 'system';
2023-03-12 21:27:16.794 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:27:16 | 耗时 1 ms | SQL 语句：
SELECT u.user_id userId, u.username, u.password, u.email, u.mobile, u. STATUS, u.create_time createTime, u.ssex, d.dept_id deptId, d.dept_name deptName, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME lastLoginTime, GROUP_CONCAT(r.role_id) roleId, GROUP_CONCAT(r.ROLE_NAME) roleName FROM t_user u LEFT JOIN t_dept d ON (u.dept_id = d.dept_id) LEFT JOIN t_user_role ur ON (u.user_id = ur.user_id) LEFT JOIN t_role r ON r.role_id = ur.role_id WHERE u.username = 'system' group by u.username, u.user_id, u.password, u.email, u.mobile, u.STATUS, u.create_time, u.ssex, d.dept_id, d.dept_name, u.AVATAR, u.DESCRIPTION, u.LAST_LOGIN_TIME;
2023-03-12 21:27:16.808 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:27:16 | 耗时 1 ms | SQL 语句：
INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( 'system', '2023-03-12T21:27:16.800+0800', '', '127.0.0.1' );
2023-03-12 21:27:16.892 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:27:16.914 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:27:16 | 耗时 1 ms | SQL 语句：
select m.* from t_menu m where m.type <> 1 and m.MENU_ID in (select distinct rm.menu_id from t_role_menu rm left join t_role r on (rm.role_id = r.role_id) left join t_user_role ur on (ur.role_id = r.role_id) left join t_user u on (u.user_id = ur.user_id) where u.username = 'system') order by m.order_num;
2023-03-12 21:27:17.159 febs [http-nio-9527-exec-5] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:27:17.164 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:27:17 | 耗时 1 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:27:17.166 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:27:17 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:27:17.168 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:27:17 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:27:17.171 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:27:17 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:27:17.174 febs [http-nio-9527-exec-5] INFO  p6spy - 2023-03-12 21:27:17 | 耗时 1 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:55:59.981 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:55:59.991 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:55:59 | 耗时 6 ms | SQL 语句：
select count(1) from t_login_log;
2023-03-12 21:55:59.992 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:55:59 | 耗时 0 ms | SQL 语句：
select count(1) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:55:59.994 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:55:59 | 耗时 0 ms | SQL 语句：
select count(distinct(ip)) from t_login_log where datediff(login_time,now())=0;
2023-03-12 21:55:59.995 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:55:59 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 group by days;
2023-03-12 21:55:59.997 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:55:59 | 耗时 0 ms | SQL 语句：
select date_format(l.login_time, '%m-%d') days, count(1) count from ( select * from t_login_log where date_sub(curdate(), interval 7 day) <= date(login_time) ) as l where 1 = 1 and l.username = 'system' group by days;
2023-03-12 21:56:05.533 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:05.578 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:56:05 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM order_info oi LEFT JOIN staff_info si ON oi.handler_code = si.staff_code WHERE 1 = 1;
2023-03-12 21:56:05.581 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:56:05 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.remark , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime, si.staff_name AS handlerName, si.avatar AS handlerAvatar FROM order_info oi LEFT JOIN staff_info si ON oi.handler_code = si.staff_code WHERE 1 = 1 LIMIT 0,10;
2023-03-12 21:56:11.065 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:11.079 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:56:11 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM out_stock_record osr LEFT JOIN staff_info si1 ON osr.handler_code = si1.staff_code LEFT JOIN staff_info si2 ON osr.custodian_code = si2.staff_code WHERE 1 = 1;
2023-03-12 21:56:11.080 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:56:11 | 耗时 0 ms | SQL 语句：
SELECT osr.id, osr.code, osr.handler_code AS handlerCode, osr.custodian_code AS custodianCode, osr.create_date AS createDate, osr.remark, si1.staff_name AS handlerName, si2.staff_name AS custodianName, si1.avatar AS handlerAvatar, si2.avatar AS custodianAvatar FROM out_stock_record osr LEFT JOIN staff_info si1 on osr.handler_code = si1.staff_code LEFT JOIN staff_info si2 on osr.custodian_code = si2.staff_code WHERE 1 = 1 ORDER BY osr.create_date DESC LIMIT 0,10;
2023-03-12 21:56:13.443 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:13.457 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:56:13 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM storage_record sr LEFT JOIN staff_info si1 ON sr.handler_code = si1.staff_code LEFT JOIN staff_info si2 ON sr.custodian_code = si2.staff_code LEFT JOIN supplier_info si ON sr.supplier_id = si.id WHERE 1 = 1;
2023-03-12 21:56:13.459 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:56:13 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark, si1.staff_name AS handlerName, si2.staff_name AS custodianName, si1.avatar AS handlerAvatar, si2.avatar AS custodianAvatar, si.supplier_name AS supplierName FROM storage_record sr LEFT JOIN staff_info si1 on sr.handler_code = si1.staff_code LEFT JOIN staff_info si2 on sr.custodian_code = si2.staff_code LEFT JOIN supplier_info si on sr.supplier_id = si.id WHERE 1 = 1 ORDER BY sr.create_date DESC LIMIT 0,10;
2023-03-12 21:56:14.951 febs [http-nio-9527-exec-9] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:14.951 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:14.951 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:14.974 febs [http-nio-9527-exec-9] INFO  p6spy - 2023-03-12 21:56:14 | 耗时 0 ms | SQL 语句：
SELECT id,supplier_name,create_date,remark,purchase_type FROM supplier_info;
2023-03-12 21:56:14.974 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 21:56:14 | 耗时 0 ms | SQL 语句：
SELECT id,code,name,create_date FROM product_type_info;
2023-03-12 21:56:14.976 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 21:56:14 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,staff_name,staff_type,staff_sex,staff_status,avatar,on_board_time,resign_time,birth_date,remark,email FROM staff_info WHERE staff_status = 1;
2023-03-12 21:56:19.688 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:19.697 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:56:19 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM staff_info si WHERE 1 = 1;
2023-03-12 21:56:19.697 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:56:19 | 耗时 0 ms | SQL 语句：
SELECT si.id, si.staff_code AS staffCode, si.staff_name AS staffName, si.staff_type AS staffType, si.staff_sex AS staffSex, si.staff_status AS staffStatus, si.avatar, si.on_board_time AS onBoardTime, si.resign_time AS resignTime, si.birth_date AS birthDate, si.remark, si.email FROM staff_info si WHERE 1 = 1 ORDER BY si.resign_time DESC LIMIT 0,10;
2023-03-12 21:56:20.136 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:20.146 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:56:20 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM salary_gain sg LEFT JOIN staff_info si ON si.staff_code = sg.staff_code WHERE 1 = 1;
2023-03-12 21:56:20.147 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:56:20 | 耗时 0 ms | SQL 语句：
SELECT sg.id, sg.staff_code AS staffCode, sg.salary, sg.current_flag AS currentFlag, sg.create_date AS createDate, sg.type, sg.remark, si.staff_name AS staffName, si.avatar, si.staff_type AS staffType FROM salary_gain sg LEFT JOIN staff_info si ON si.staff_code = sg.staff_code WHERE 1 = 1 ORDER BY sg.create_date DESC LIMIT 0,10;
2023-03-12 21:56:20.831 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:20.844 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:56:20 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM salary_records sr LEFT JOIN staff_info si ON si.staff_code = sr.staff_code WHERE 1 = 1;
2023-03-12 21:56:20.845 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:56:20 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.staff_code AS staffCode, sr.year, sr.month, sr.income, sr.basic_wage AS basicWage, sr.post_allowance AS postAllowance, sr.performance_bonus AS performanceBonus, sr.overtime_pay AS overtimePay, sr.holiday_costs AS holidayCosts, sr.pension, sr.unemployment, sr.medical_insurance AS medicalInsurance, sr.tax, sr.housing_fund AS housingFund, sr.payroll, sr.create_date AS createDate, sr.remark, si.staff_name AS staffName, si.avatar, si.staff_type AS staffType FROM salary_records sr LEFT JOIN staff_info si ON si.staff_code = sr.staff_code WHERE 1 = 1 ORDER BY sr.year DESC, sr.month DESC, sr.payroll DESC LIMIT 0,10;
2023-03-12 21:56:22.456 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:22.456 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:22.457 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:22.458 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 21:56:22 | 耗时 0 ms | SQL 语句：
SELECT id,code,name,create_date FROM product_type_info;
2023-03-12 21:56:22.458 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 21:56:22 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,staff_name,staff_type,staff_sex,staff_status,avatar,on_board_time,resign_time,birth_date,remark,email FROM staff_info WHERE staff_status = 1;
2023-03-12 21:56:22.463 febs [http-nio-9527-exec-4] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:22.465 febs [http-nio-9527-exec-4] INFO  p6spy - 2023-03-12 21:56:22 | 耗时 0 ms | SQL 语句：
SELECT id,code,name,create_date FROM product_type_info;
2023-03-12 21:56:22.468 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:56:22 | 耗时 2 ms | SQL 语句：
SELECT COUNT(1) FROM storehouse_info si LEFT JOIN product_type_info pri ON (pri.id = si.material_type) WHERE si.transaction_type = 0;
2023-03-12 21:56:22.470 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 21:56:22 | 耗时 0 ms | SQL 语句：
SELECT si.id, si.material_name AS materialName, si.material_type AS materialType, si.measurement_unit AS measurementUnit, si.quantity, si.transaction_type AS transactionType, si.create_date AS createDate, si.remark, si.model, si.unit_price AS unitPrice, si.inbound_order_number AS inboundOrderNumber, si.delivery_order_number AS deliveryOrderNumber, pri.name AS materialTypeName FROM storehouse_info si LEFT JOIN product_type_info pri ON (pri.id = si.material_type) WHERE si.transaction_type = 0 ORDER BY si.create_date DESC LIMIT 0,10;
2023-03-12 21:56:27.162 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 21:56:27.165 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:56:27 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM order_info oi LEFT JOIN staff_info si ON oi.handler_code = si.staff_code WHERE 1 = 1;
2023-03-12 21:56:27.166 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 21:56:27 | 耗时 0 ms | SQL 语句：
SELECT oi.id, oi.code , oi.remark , oi.total_price AS totalPrice , oi.handler_code AS handlerCode, oi.create_time AS createTime, si.staff_name AS handlerName, si.avatar AS handlerAvatar FROM order_info oi LEFT JOIN staff_info si ON oi.handler_code = si.staff_code WHERE 1 = 1 LIMIT 0,10;
2023-03-12 22:02:28.270 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:28.274 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 22:02:28 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM out_stock_record osr LEFT JOIN staff_info si1 ON osr.handler_code = si1.staff_code LEFT JOIN staff_info si2 ON osr.custodian_code = si2.staff_code WHERE 1 = 1;
2023-03-12 22:02:28.276 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 22:02:28 | 耗时 0 ms | SQL 语句：
SELECT osr.id, osr.code, osr.handler_code AS handlerCode, osr.custodian_code AS custodianCode, osr.create_date AS createDate, osr.remark, si1.staff_name AS handlerName, si2.staff_name AS custodianName, si1.avatar AS handlerAvatar, si2.avatar AS custodianAvatar FROM out_stock_record osr LEFT JOIN staff_info si1 on osr.handler_code = si1.staff_code LEFT JOIN staff_info si2 on osr.custodian_code = si2.staff_code WHERE 1 = 1 ORDER BY osr.create_date DESC LIMIT 0,10;
2023-03-12 22:02:31.746 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:31.750 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 22:02:31 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM storage_record sr LEFT JOIN staff_info si1 ON sr.handler_code = si1.staff_code LEFT JOIN staff_info si2 ON sr.custodian_code = si2.staff_code LEFT JOIN supplier_info si ON sr.supplier_id = si.id WHERE 1 = 1;
2023-03-12 22:02:31.751 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 22:02:31 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark, si1.staff_name AS handlerName, si2.staff_name AS custodianName, si1.avatar AS handlerAvatar, si2.avatar AS custodianAvatar, si.supplier_name AS supplierName FROM storage_record sr LEFT JOIN staff_info si1 on sr.handler_code = si1.staff_code LEFT JOIN staff_info si2 on sr.custodian_code = si2.staff_code LEFT JOIN supplier_info si on sr.supplier_id = si.id WHERE 1 = 1 ORDER BY sr.create_date DESC LIMIT 0,10;
2023-03-12 22:02:34.967 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:34.967 febs [http-nio-9527-exec-8] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:34.967 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:34.971 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 22:02:34 | 耗时 0 ms | SQL 语句：
SELECT id,code,name,create_date FROM product_type_info;
2023-03-12 22:02:34.971 febs [http-nio-9527-exec-8] INFO  p6spy - 2023-03-12 22:02:34 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,staff_name,staff_type,staff_sex,staff_status,avatar,on_board_time,resign_time,birth_date,remark,email FROM staff_info WHERE staff_status = 1;
2023-03-12 22:02:34.972 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 22:02:34 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM storehouse_info si LEFT JOIN product_type_info pri ON (pri.id = si.material_type) WHERE si.transaction_type = 0;
2023-03-12 22:02:34.973 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 22:02:34 | 耗时 0 ms | SQL 语句：
SELECT si.id, si.material_name AS materialName, si.material_type AS materialType, si.measurement_unit AS measurementUnit, si.quantity, si.transaction_type AS transactionType, si.create_date AS createDate, si.remark, si.model, si.unit_price AS unitPrice, si.inbound_order_number AS inboundOrderNumber, si.delivery_order_number AS deliveryOrderNumber, pri.name AS materialTypeName FROM storehouse_info si LEFT JOIN product_type_info pri ON (pri.id = si.material_type) WHERE si.transaction_type = 0 ORDER BY si.create_date DESC LIMIT 0,10;
2023-03-12 22:02:34.977 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:34.979 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 22:02:34 | 耗时 0 ms | SQL 语句：
SELECT id,code,name,create_date FROM product_type_info;
2023-03-12 22:02:36.244 febs [http-nio-9527-exec-3] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:36.248 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 22:02:36 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM salary_records sr LEFT JOIN staff_info si ON si.staff_code = sr.staff_code WHERE 1 = 1;
2023-03-12 22:02:36.249 febs [http-nio-9527-exec-3] INFO  p6spy - 2023-03-12 22:02:36 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.staff_code AS staffCode, sr.year, sr.month, sr.income, sr.basic_wage AS basicWage, sr.post_allowance AS postAllowance, sr.performance_bonus AS performanceBonus, sr.overtime_pay AS overtimePay, sr.holiday_costs AS holidayCosts, sr.pension, sr.unemployment, sr.medical_insurance AS medicalInsurance, sr.tax, sr.housing_fund AS housingFund, sr.payroll, sr.create_date AS createDate, sr.remark, si.staff_name AS staffName, si.avatar, si.staff_type AS staffType FROM salary_records sr LEFT JOIN staff_info si ON si.staff_code = sr.staff_code WHERE 1 = 1 ORDER BY sr.year DESC, sr.month DESC, sr.payroll DESC LIMIT 0,10;
2023-03-12 22:02:38.444 febs [http-nio-9527-exec-6] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:38.449 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 22:02:38 | 耗时 1 ms | SQL 语句：
SELECT COUNT(1) FROM out_stock_record osr LEFT JOIN staff_info si1 ON osr.handler_code = si1.staff_code LEFT JOIN staff_info si2 ON osr.custodian_code = si2.staff_code WHERE 1 = 1;
2023-03-12 22:02:38.451 febs [http-nio-9527-exec-6] INFO  p6spy - 2023-03-12 22:02:38 | 耗时 1 ms | SQL 语句：
SELECT osr.id, osr.code, osr.handler_code AS handlerCode, osr.custodian_code AS custodianCode, osr.create_date AS createDate, osr.remark, si1.staff_name AS handlerName, si2.staff_name AS custodianName, si1.avatar AS handlerAvatar, si2.avatar AS custodianAvatar FROM out_stock_record osr LEFT JOIN staff_info si1 on osr.handler_code = si1.staff_code LEFT JOIN staff_info si2 on osr.custodian_code = si2.staff_code WHERE 1 = 1 ORDER BY osr.create_date DESC LIMIT 0,10;
2023-03-12 22:02:39.043 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:39.048 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 22:02:39 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM storage_record sr LEFT JOIN staff_info si1 ON sr.handler_code = si1.staff_code LEFT JOIN staff_info si2 ON sr.custodian_code = si2.staff_code LEFT JOIN supplier_info si ON sr.supplier_id = si.id WHERE 1 = 1;
2023-03-12 22:02:39.049 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 22:02:39 | 耗时 0 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark, si1.staff_name AS handlerName, si2.staff_name AS custodianName, si1.avatar AS handlerAvatar, si2.avatar AS custodianAvatar, si.supplier_name AS supplierName FROM storage_record sr LEFT JOIN staff_info si1 on sr.handler_code = si1.staff_code LEFT JOIN staff_info si2 on sr.custodian_code = si2.staff_code LEFT JOIN supplier_info si on sr.supplier_id = si.id WHERE 1 = 1 ORDER BY sr.create_date DESC LIMIT 0,10;
2023-03-12 22:02:39.731 febs [http-nio-9527-exec-1] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:39.731 febs [http-nio-9527-exec-7] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:39.733 febs [http-nio-9527-exec-1] INFO  p6spy - 2023-03-12 22:02:39 | 耗时 0 ms | SQL 语句：
SELECT id,code,name,create_date FROM product_type_info;
2023-03-12 22:02:39.733 febs [http-nio-9527-exec-7] INFO  p6spy - 2023-03-12 22:02:39 | 耗时 0 ms | SQL 语句：
SELECT id,staff_code,staff_name,staff_type,staff_sex,staff_status,avatar,on_board_time,resign_time,birth_date,remark,email FROM staff_info WHERE staff_status = 1;
2023-03-12 22:02:39.733 febs [http-nio-9527-exec-2] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:02:39.736 febs [http-nio-9527-exec-2] INFO  p6spy - 2023-03-12 22:02:39 | 耗时 0 ms | SQL 语句：
SELECT id,supplier_name,create_date,remark,purchase_type FROM supplier_info;
2023-03-12 22:04:43.358 febs [http-nio-9527-exec-10] INFO  c.m.f.common.authentication.JWTUtil - token is valid
2023-03-12 22:04:43.363 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 22:04:43 | 耗时 0 ms | SQL 语句：
SELECT COUNT(1) FROM storage_record sr LEFT JOIN staff_info si1 ON sr.handler_code = si1.staff_code LEFT JOIN staff_info si2 ON sr.custodian_code = si2.staff_code LEFT JOIN supplier_info si ON sr.supplier_id = si.id WHERE 1 = 1;
2023-03-12 22:04:43.366 febs [http-nio-9527-exec-10] INFO  p6spy - 2023-03-12 22:04:43 | 耗时 1 ms | SQL 语句：
SELECT sr.id, sr.code, sr.supplier_id AS supplierId, sr.handler_code AS handlerCode, sr.custodian_code AS custodianCode, sr.total_price AS totalPrice, sr.create_date AS createDate, sr.remark, si1.staff_name AS handlerName, si2.staff_name AS custodianName, si1.avatar AS handlerAvatar, si2.avatar AS custodianAvatar, si.supplier_name AS supplierName FROM storage_record sr LEFT JOIN staff_info si1 on sr.handler_code = si1.staff_code LEFT JOIN staff_info si2 on sr.custodian_code = si2.staff_code LEFT JOIN supplier_info si on sr.supplier_id = si.id WHERE 1 = 1 ORDER BY sr.create_date DESC LIMIT 0,10;
